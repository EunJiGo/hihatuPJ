import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:hihatu_project/apply/features/transportation/presentation/transportation/detail/transportation_detail_screen.dart';
import 'package:hihatu_project/apply/features/transportation/presentation/transportation/widgets/transportation_approval_status.dart';
import 'package:intl/intl.dart';

import '../state/transportation_provider.dart';

// ‚ûä ConsumerStatefulWidget ÏúºÎ°ú Î≥ÄÍ≤Ω
class TransportationScreen extends ConsumerStatefulWidget {
  const TransportationScreen({super.key});

  @override
  ConsumerState<TransportationScreen> createState() =>
      _TransportationScreenState();
}

// ‚ûã State ‚Üí ConsumerState Î°ú Î≥ÄÍ≤Ω
class _TransportationScreenState extends ConsumerState<TransportationScreen>
    with SingleTickerProviderStateMixin {
  DateTime currentMonth = DateTime.now();

  late ScrollController _scrollController;
  bool isSummaryVisible = true;
  double _lastOffset = 0;

  AnimationController? _animationController;

  void moveMonth(int diff) {
    setState(() {
      currentMonth = DateTime(currentMonth.year, currentMonth.month + diff);
    });
  }

  void _scrollListener() {
    final offset = _scrollController.offset;

    if (offset <= 0) {
      // Ïä§ÌÅ¨Î°§ Îß® ÏúÑÏùº Îïå Ìï≠ÏÉÅ Î≥¥Ïó¨Ï§å
      if (!isSummaryVisible) {
        setState(() => isSummaryVisible = true);
      }
    } else if (offset > _lastOffset && isSummaryVisible) {
      // ÏïÑÎûòÎ°ú Ïä§ÌÅ¨Î°§ Ï§ë -> Ïà®ÍπÄ
      setState(() => isSummaryVisible = false);
    } else if (offset < _lastOffset && !isSummaryVisible) {
      // ÏúÑÎ°ú Ïä§ÌÅ¨Î°§ Ï§ë -> Îã§Ïãú ÌëúÏãú
      setState(() => isSummaryVisible = true);
    }

    _lastOffset = offset;
  }

  @override
  void initState() {
    super.initState();
    _scrollController = ScrollController();
    _scrollController.addListener(_scrollListener);
    _animationController = AnimationController(
      duration: const Duration(seconds: 2), // Ìïú Î∞îÌÄ¥ ÎèÑÎäî Îç∞ Í±∏Î¶¨Îäî ÏãúÍ∞Ñ
      vsync: this,
    )..repeat(); // Î¨¥Ìïú Î∞òÎ≥µ ÌöåÏ†Ñ
  }

  @override
  void dispose() {
    _scrollController.removeListener(_scrollListener);
    _scrollController.dispose();
    _animationController?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {

// ‚ûå Riverpod provider Íµ¨ÎèÖ
    final transportationAsync = ref.watch(transportationProvider(currentMonth));
    // final ym = DateFormat('yyyyÂπ¥ MMÊúà').format(currentMonth); // 7ÏõîÏù¥Î©¥ 07ÏõîÏù¥Îê®
    final ym = '${currentMonth.year}Âπ¥ ${currentMonth.month}Êúà';



      // Îç∞Ïù¥ÌÑ∞ ÏûàÏùÑ Îïå UI (ÏõêÎûò your data Ï≤òÎ¶¨ ÏΩîÎìú)
      return Scaffold(
        appBar: AppBar(
          backgroundColor: Colors.white,
          elevation: 0,
          centerTitle: true,
          leading: Padding(
            padding: const EdgeInsets.only(left: 8.0),
            child: IconButton(
              icon: const Icon(Icons.arrow_back_ios_new, size: 20),
              onPressed: () {
                Navigator.of(context).pop();
              },
              tooltip: 'Êàª„Çã',
              color: Colors.black87,
            ),
          ),
          title: const Text(
            '‰∫§ÈÄöË≤ª„ÉªÂÆöÊúüÂà∏',
            style: TextStyle(
              color: Colors.black87,
              fontSize: 18,
              fontWeight: FontWeight.w600,
              letterSpacing: 1.0,
            ),
          ),
          actions: [
            Padding(
              padding: const EdgeInsets.only(right: 12.0),
              child: ElevatedButton(
                onPressed:
                    () => setState(() => currentMonth = DateTime.now()),
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 20,
                    vertical: 10,
                  ),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(14),
                  ),
                  backgroundColor: Colors.transparent,
                  elevation: 0,
                  shadowColor: Colors.transparent,
                ).copyWith(
                  overlayColor: WidgetStateProperty.all(
                    Colors.transparent,
                  ), // üëà ÏöîÍ≤å ÌïµÏã¨! (ÌÑ∞Ïπò Ïãú ÌöåÏÉâ/Î¨ºÍ≤∞ Ìö®Í≥º Ï†úÍ±∞)
                ),
                child: Ink(
                  decoration: BoxDecoration(
                    // gradient: const LinearGradient(
                    //   colors: [Color(0xFF81C784), Color(0xFF4DB6AC)],
                    //   begin: Alignment.bottomCenter,
                    //   end: Alignment.topCenter,
                    // ),
                    borderRadius: BorderRadius.circular(50),
                  ),
                  child: Container(
                    alignment: Alignment.center,
                    // constraints: const BoxConstraints(
                    //   minWidth: 50,
                    //   minHeight: 30,
                    // ),
                    child: const Text(
                      '‰ªäÊúà',
                      style: TextStyle(
                        color: Color(0xFF00449e),
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                        shadows: [
                          Shadow(
                            offset: Offset(0, 1),
                            blurRadius: 1,
                            color: Colors.black26,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),

        body: Builder(
          builder: (context) {
            if (transportationAsync.isLoading) {
              return const Center(
                child: CircularProgressIndicator(color: Color(0xFF42A5F5)),
              );
            }

            if (transportationAsync.hasError) {
              return Center(
                child: Text('„Ç®„É©„ÉºÁô∫Áîü: ${transportationAsync.error}'),
              );
            }

            if (!transportationAsync.hasValue || transportationAsync.value == null) {
              return const Center(child: Text('„Éá„Éº„Çø„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì'));
            }

            final transportationItem = transportationAsync.value!;

            // transportationItemÏóêÏÑú "commute" ÌÉÄÏûÖ ÌïÑÌÑ∞ÎßÅ
            // Ï†ïÍ∏∞Í∂å
            final commuteList =
            transportationItem
                .where((item) => item.expenseType == 'commute')
                .toList();

            final commuteTotal = commuteList.fold(
              0,
                  (sum, item) => sum + item.amount, //
            );

            // ÍµêÌÜµÎπÑ
            final singleList =
            transportationItem
                .where((item) => item.expenseType == 'single')
                .toList();

            final singleTotal = singleList.fold(
              0,
                  (sum, item) => sum + item.amount,
            );

            final grandTotal = commuteTotal + singleTotal;



            return Padding(
              padding: const EdgeInsets.symmetric(
                horizontal: 16,
                vertical: 12,
              ),
              child: Column(
                children: [
                  // Ïõî Ïù¥Îèô Row
                  Container(
                    margin: const EdgeInsets.only(bottom: 10),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        // Ïù¥Ï†Ñ Îã¨ Î≤ÑÌäº (ÎÇ¥Î∂Ä Í∑∏ÎùºÎç∞Ïù¥ÏÖò Ïú†ÏßÄ, Ï£ºÎ≥Ä Í∑∏Î¶ºÏûê Ï†úÍ±∞)
                        ElevatedButton(
                          onPressed: () => moveMonth(-1),
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 20,
                              vertical: 10,
                            ),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(14),
                            ),
                            backgroundColor: Colors.transparent,
                            elevation: 0,
                            shadowColor: Colors.transparent,
                          ).copyWith(
                            overlayColor: WidgetStateProperty.all(
                              Colors.transparent,
                            ), // üëà ÏöîÍ≤å ÌïµÏã¨! (ÌÑ∞Ïπò Ïãú ÌöåÏÉâ/Î¨ºÍ≤∞ Ìö®Í≥º Ï†úÍ±∞)
                          ),
                          child: Ink(
                            decoration: BoxDecoration(
                              gradient: const LinearGradient(
                                colors: [
                                  Color(0xFF64B5F6),
                                  Color(0xFF1976D2),
                                ],
                                begin: Alignment.topLeft,
                                end: Alignment.bottomRight,
                              ),
                              borderRadius: BorderRadius.circular(14),
                            ),
                            child: Container(
                              alignment: Alignment.center,
                              constraints: const BoxConstraints(
                                minWidth: 54,
                                minHeight: 26,
                              ),
                              child: const Text(
                                'ÂâçÊúà',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 14,
                                  shadows: [
                                    Shadow(
                                      offset: Offset(0, 1),
                                      blurRadius: 1,
                                      color: Colors.black26,
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ),

                        // ÌòÑÏû¨ Ïó∞Ïõî ÌÖçÏä§Ìä∏
                        Text(
                          ym,
                          style: const TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.w700,
                            color: Color(0xFF1976D2),
                          ),
                        ),

                        // Îã§Ïùå Îã¨ Î≤ÑÌäº (ÎÇ¥Î∂Ä Í∑∏ÎùºÎç∞Ïù¥ÏÖò Ïú†ÏßÄ, Ï£ºÎ≥Ä Í∑∏Î¶ºÏûê Ï†úÍ±∞)
                        ElevatedButton(
                          onPressed: () => moveMonth(1),
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 20,
                              vertical: 10,
                            ),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(14),
                            ),
                            backgroundColor: Colors.transparent,
                            elevation: 0,
                            shadowColor: Colors.transparent,
                          ).copyWith(
                            overlayColor: WidgetStateProperty.all(
                              Colors.transparent,
                            ),
                          ),
                          child: Ink(
                            decoration: BoxDecoration(
                              gradient: const LinearGradient(
                                colors: [
                                  Color(0xFF1976D2),
                                  Color(0xFF64B5F6),
                                ],
                                begin: Alignment.topLeft,
                                end: Alignment.bottomRight,
                              ),
                              borderRadius: BorderRadius.circular(14),
                            ),
                            child: Container(
                              alignment: Alignment.center,
                              constraints: const BoxConstraints(
                                minWidth: 54,
                                minHeight: 26,
                              ),
                              child: const Text(
                                'Ê¨°Êúà',
                                style: TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 14,
                                  shadows: [
                                    Shadow(
                                      offset: Offset(0, 1),
                                      blurRadius: 1,
                                      color: Colors.black26,
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),

                  // Ìï©Í≥Ñ ÏòÅÏó≠
                  Visibility(
                    visible: isSummaryVisible,
                    replacement: const SizedBox.shrink(),
                    child: Column(
                      children: [
                        Container(
                          padding: const EdgeInsets.symmetric(
                            vertical: 10,
                            horizontal: 20,
                          ),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            // color: Color(0xFFd8d8d8),
                            // border: Border.all(
                            // color: Color(0xFF37474F),
                            // ),
                            borderRadius: BorderRadius.circular(10),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.grey.withOpacity(0.8),
                                // ÌöåÏÉâ Í∑∏Î¶ºÏûê
                                blurRadius: 8,
                                offset: Offset(
                                  3,
                                  4,
                                ), // üëâ Ïò§Î•∏Ï™Ω 3, ÏïÑÎûò 4 ÌîΩÏÖÄÎ°ú Í∑∏Î¶ºÏûê ÏúÑÏπò
                              ),
                            ],
                          ),
                          child: Column(
                            children: [
                              Row(
                                children: [
                                  const Icon(
                                    Icons.confirmation_number,
                                    color: Color(0xFF81C784),
                                  ),
                                  const SizedBox(width: 8),
                                  Expanded(
                                    child: Text(
                                      'ÂÆöÊúüÂà∏(${commuteList.length}‰ª∂)',
                                      style: TextStyle(
                                        fontWeight: FontWeight.w600,
                                        fontSize: 16,
                                        color: Colors.black,
                                        // color: Color(0xFF1565C0),
                                      ),
                                    ),
                                  ),
                                  Text(
                                    'Ôø•${formatCurrency(commuteTotal)}',
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                      fontSize: 16,
                                      color: Color(0xFF81C784),
                                    ),
                                  ),
                                ],
                              ),
                              const SizedBox(height: 12),
                              Row(
                                children: [
                                  const Icon(
                                    Icons.directions_bus,
                                    color: Color(0xFFFFB74D),
                                  ),
                                  const SizedBox(width: 8),
                                  Expanded(
                                    child: Text(
                                      '‰∫§ÈÄöË≤ª(${singleList.length}‰ª∂)',
                                      style: const TextStyle(
                                        fontWeight: FontWeight.w600,
                                        fontSize: 16,
                                        color: Colors.black,
                                        // color: Color(0xFF1B5E20),
                                      ),
                                    ),
                                  ),
                                  Text(
                                    'Ôø•${formatCurrency(singleTotal)}',
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                      fontSize: 16,
                                      color: Color(0xFFFFB74D),
                                    ),
                                  ),
                                ],
                              ),
                              const Divider(
                                height: 10,
                                thickness: 1,
                                color: Colors.black54,
                                // color: Color(0xFF2E7D32),
                              ),
                              Row(
                                children: [
                                  const Icon(
                                    Icons.attach_money,
                                    color: Color(0xFF37474F),
                                  ),
                                  const SizedBox(width: 8),
                                  const Expanded(
                                    child: Text(
                                      'Á∑èÂêàË®à',
                                      style: TextStyle(
                                        fontWeight: FontWeight.w700,
                                        fontSize: 16,
                                        // color: Color(0xFF004D40),
                                        color: Colors.black,
                                      ),
                                    ),
                                  ),
                                  Text(
                                    'Ôø•${formatCurrency(grandTotal)}',
                                    style: const TextStyle(
                                      fontWeight: FontWeight.w700,
                                      fontSize: 18,
                                      color: Color(0xFF37474F),
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(height: 10),
                      ],
                    ),
                  ),

                  StatusExplanation(),

                  const SizedBox(height: 10),

                  // Ïã†Ï≤≠ ÎÇ¥Ïó≠Îì§ ÏòÅÏó≠ (Ïä§ÌÅ¨Î°§ Í∞ÄÎä•)
                  Expanded(
                    child: SingleChildScrollView(
                      controller: _scrollController,
                      physics: const ClampingScrollPhysics(), // ‚Üê Î∞îÏö¥Ïä§ Ï†úÍ±∞
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Ï†ïÍ∏∞Í∂å Ïã†Ï≤≠ ÎÇ¥Ïó≠
                          Column(
                            children: [
                              Row(
                                children: [
                                  const Icon(
                                    Icons.confirmation_number,
                                    color: Color(0xFF81C784),
                                  ),
                                  const SizedBox(width: 8),
                                  const Text(
                                    'ÂÆöÊúüÂà∏Áî≥Ë´ãÂ±•Ê≠¥',
                                    style: TextStyle(
                                      fontSize: 18,
                                      fontWeight: FontWeight.w600,
                                      // color: Color(0xFF004D40),
                                      color: Colors.black,
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          const SizedBox(height: 8),
                          if (commuteList.isEmpty)
                            Padding(
                              padding: const EdgeInsets.only(left: 10.0),
                              child: const Text(
                                'Áî≥Ë´ãÂ±•Ê≠¥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ',
                                style: TextStyle(color: Colors.grey),
                              ),
                            )
                          else
                            ListView.builder(
                              //shrinkWrap: trueÎ•º Ï£ºÎ©¥ ListViewÍ∞Ä ÏûêÏãù ÏúÑÏ†Ø ÌÅ¨Í∏∞Ïóê ÎßûÏ∂∞ ÎÜíÏù¥Î•º ÏµúÏÜåÎ°ú Ïû°ÏïÑÏ§å
                              // ÎåÄÏã† ÏÑ±Îä•ÏùÄ ÏïΩÍ∞Ñ Îñ®Ïñ¥Ïßà Ïàò ÏûàÏúºÎãà Î¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖú ÏàòÍ∞Ä ÎßéÏßÄ ÏïäÏùÑ Îïå Í∂åÏû•
                              shrinkWrap: true,
                              physics: const NeverScrollableScrollPhysics(),
                              // Ïä§ÌÅ¨Î°§ Ïïà ÎêòÎèÑÎ°ù (SingleChildScrollView ÎÇ¥Ïóê ÏûàÏúºÎØÄÎ°ú)
                              itemCount: commuteList.length,
                              // transportationAsync Î¶¨Ïä§Ìä∏ÏóêÏÑú  expenseTypeÏù¥ ÌÉÄÏûÖÏù¥ "commute"Ïù∏ Í≤ÉÎßå Í∑∏ Í∏∏Ïù¥
                              itemBuilder: (context, index) {
                                final item = commuteList[index];
                                final parsedDate = DateTime.tryParse(
                                  item.updatedAt,
                                );
                                final dateText =
                                parsedDate != null
                                    ? DateFormat(
                                  'MM/dd',
                                ).format(parsedDate)
                                    : '-';

                                return Container(
                                  margin: const EdgeInsets.only(bottom: 12),
                                  padding: const EdgeInsets.all(16),
                                  decoration: BoxDecoration(
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(16),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.black.withOpacity(0.05),
                                        blurRadius: 6,
                                        offset: const Offset(1, 2),
                                      ),
                                    ],
                                  ),
                                  child: Column(
                                    crossAxisAlignment:
                                    CrossAxisAlignment.start,
                                    children: [
                                      Row(
                                        children: [
                                          const Icon(
                                            Icons.confirmation_number,
                                            color: Color(0xFF81C784),
                                          ),
                                          const SizedBox(width: 8),
                                          Text(
                                            commuteList[index].fromStation,
                                            style: const TextStyle(
                                              fontWeight: FontWeight.bold,
                                              fontSize: 16,
                                              color: Colors.black87,
                                            ),
                                          ),
                                          const SizedBox(width: 5),
                                          Icon(
                                            Icons.remove_rounded,
                                            size: 15,
                                          ),
                                          const SizedBox(width: 5),
                                          Text(
                                            commuteList[index].toStation,
                                            style: const TextStyle(
                                              fontWeight: FontWeight.bold,
                                              fontSize: 16,
                                              color: Colors.black87,
                                            ),
                                          ),
                                          const Spacer(),
                                          Row(
                                            children: [
                                              Text(
                                                'Ôø•',
                                                style: const TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  fontSize: 16,
                                                  // color: Color(0xFF282828),
                                                  color: Color(0xFF81C784),
                                                ),
                                              ),
                                              Text(
                                                formatCurrency(
                                                  commuteList[index].amount,
                                                ),
                                                style: const TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  fontSize: 16,
                                                  color: Color(0xFF424242),
                                                  // color: Color(0xFF81C784),
                                                ),
                                              ),
                                            ],
                                          ),
                                        ],
                                      ),
                                      const SizedBox(height: 10),
                                      Row(
                                        children: [
                                          const Icon(
                                            Icons.date_range,
                                            size: 16,
                                            color: Color(0xFFfe673e),
                                          ),
                                          const SizedBox(width: 4),
                                          Text(
                                            'Áî≥Ë´ãÊó•Ôºö$dateText',
                                            style: const TextStyle(
                                              fontSize: 13,
                                              color: Color(0xFF515151),
                                            ),
                                          ),
                                          const SizedBox(width: 16),
                                          const Icon(
                                            Icons.timelapse,
                                            size: 16,
                                            color: Color(0xFFfa6a23),
                                          ),
                                          const SizedBox(width: 4),
                                          Text(
                                            formatCommuteDuration(
                                              commuteList[index]
                                                  .commuteDuration,
                                            ),
                                            style: const TextStyle(
                                              fontSize: 13,
                                              color: Color(0xFF515151),
                                            ),
                                          ),
                                          const Spacer(),

                                          commuteList[index].reviewStatus ==
                                              'pending'
                                              ? RotationTransition(
                                            turns:
                                            _animationController ??
                                                AlwaysStoppedAnimation(0),
                                            child: getStatusText(
                                              commuteList[index]
                                                  .reviewStatus,
                                            ),
                                          )
                                              : getStatusText(
                                            commuteList[index]
                                                .reviewStatus,
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                );
                              },
                            ),
                          const SizedBox(height: 30),

                          // ÍµêÌÜµÎπÑ Ïã†Ï≤≠ ÎÇ¥Ïó≠
                          Row(
                            children: [
                              const Icon(
                                Icons.directions_bus,
                                color: Color(0xFFFFB74D),
                              ),
                              const SizedBox(width: 8),
                              const Text(
                                '‰∫§ÈÄöË≤ªÁî≥Ë´ãÂ±•Ê≠¥',
                                style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.w600,
                                  // color: Color(0xFFBF360C),
                                  color: Colors.black,
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 8),
                          if (singleList.isEmpty)
                            Padding(
                              padding: const EdgeInsets.only(left: 10.0),
                              child: const Text(
                                'Áî≥Ë´ãÂ±•Ê≠¥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ',
                                style: TextStyle(color: Colors.grey),
                              ),
                            )
                          else
                            ListView.builder(
                              shrinkWrap: true,
                              physics: const NeverScrollableScrollPhysics(),
                              // Ïä§ÌÅ¨Î°§ Ïïà ÎêòÎèÑÎ°ù (SingleChildScrollView ÎÇ¥Ïóê ÏûàÏúºÎØÄÎ°ú)
                              itemCount: singleList.length,
                              itemBuilder: (BuildContext context, int index) {
                                final item = singleList[index];
                                final parsedDate = DateTime.tryParse(
                                  item.updatedAt,
                                );
                                final dateText =
                                parsedDate != null
                                    ? DateFormat(
                                  'MM/dd',
                                ).format(parsedDate)
                                    : '-';

                                return Container(
                                  margin: const EdgeInsets.only(bottom: 12),
                                  padding: const EdgeInsets.all(16),
                                  decoration: BoxDecoration(
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(16),
                                    boxShadow: [
                                      BoxShadow(
                                        color: Colors.black.withOpacity(0.05),
                                        blurRadius: 6,
                                        offset: const Offset(1, 2),
                                      ),
                                    ],
                                  ),
                                  child: Column(
                                    crossAxisAlignment:
                                    CrossAxisAlignment.start,
                                    children: [
                                      Row(
                                        children: [
                                          const Icon(
                                            Icons.directions_bus,
                                            color: Color(0xFFFFB74D),
                                          ),
                                          const SizedBox(width: 8),
                                          Text(
                                            singleList[index].fromStation,
                                            style: const TextStyle(
                                              fontWeight: FontWeight.bold,
                                              fontSize: 16,
                                              color: Colors.black87,
                                            ),
                                          ),
                                          const SizedBox(width: 8),
                                          singleList[index].twice
                                              ? Icon(
                                            Icons.repeat,
                                            size: 20,
                                            color: Color(0xFF0125f3),
                                          )
                                              : Icon(
                                            Icons.arrow_right_alt,
                                            size: 18,
                                            color: Color(0xFFf30101),
                                          ),
                                          const SizedBox(width: 8),
                                          Text(
                                            singleList[index].toStation,
                                            style: const TextStyle(
                                              fontWeight: FontWeight.bold,
                                              fontSize: 16,
                                              color: Colors.black87,
                                            ),
                                          ),
                                          const Spacer(),
                                          Text(
                                            'Ôø•${formatCurrency(singleList[index].amount)}',
                                            style: const TextStyle(
                                              fontWeight: FontWeight.bold,
                                              fontSize: 16,
                                              color: Color(0xFF81C784),
                                            ),
                                          ),
                                        ],
                                      ),
                                      const SizedBox(height: 10),

                                      Row(
                                        children: [
                                          const Icon(
                                            Icons.date_range,
                                            size: 16,
                                            color: Color(0xFFfe673e),
                                          ),
                                          const SizedBox(width: 4),
                                          Text(
                                            'Áî≥Ë´ãÊó•Ôºö$dateText',
                                            style: const TextStyle(
                                              fontSize: 13,
                                              color: Color(0xFF515151),
                                            ),
                                          ),
                                          const SizedBox(width: 16),
                                          const Icon(
                                            Icons.info_outline,
                                            size: 14,
                                            color: Color(0xFF5b0075),
                                          ),
                                          const SizedBox(width: 4),
                                          Text(
                                            singleList[index].goals ?? '-',
                                            style: const TextStyle(
                                              fontSize: 14,
                                              color: Color(0xFF515151),
                                            ),
                                          ),
                                          const Spacer(),
                                          singleList[index].reviewStatus ==
                                              'pending'
                                              ? RotationTransition(
                                            turns:
                                            _animationController ??
                                                AlwaysStoppedAnimation(0),
                                            child: getStatusText(
                                              singleList[index]
                                                  .reviewStatus,
                                            ),
                                          )
                                              : getStatusText(
                                            singleList[index]
                                                .reviewStatus,
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                );
                              },
                            ),

                          const SizedBox(height: 10),
                        ],
                      ),
                    ),
                  ),

                  // Ïã†Ï≤≠ Î≤ÑÌäº 2Í∞ú
                  Row(
                    children: [
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: () {
                            // TODO: Ï†ïÍ∏∞Í∂å Ïã†Ï≤≠ ÌôîÎ©¥ Ïù¥Îèô Ï≤òÎ¶¨
                          },
                          icon: const Icon(
                            Icons.confirmation_number_outlined,
                          ),
                          label: const Text('ÂÆöÊúüÂà∏Áî≥Ë´ã'),
                          style: ElevatedButton.styleFrom(
                            foregroundColor: const Color(0xFF004D40),
                            backgroundColor: const Color(0xFF81C784),
                            padding: const EdgeInsets.symmetric(vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(16),
                            ),
                            textStyle: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(width: 14),
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (_) => TransportationInputScreen(),
                              ),
                            );

                          },
                          icon: const Icon(Icons.directions_bus_outlined),
                          label: const Text('‰∫§ÈÄöË≤ª Áî≥Ë´ã'),
                          style: ElevatedButton.styleFrom(
                            foregroundColor: const Color(0xFFBF360C),
                            backgroundColor: const Color(0xFFFFB74D),
                            padding: const EdgeInsets.symmetric(vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(16),
                            ),
                            textStyle: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                ],
              ),
            );
          }
        ),
        backgroundColor: const Color(0xFFF5F7FA),
      );
    }




}

String formatCommuteDuration(String? duration) {
  switch (duration) {
    case '1m':
      return 'Ôºë„É∂Êúà';
    case '3m':
      return 'Ôºì„É∂Êúà';
    case '6m':
      return 'Ôºñ„É∂Êúà';
    default:
      return '-';
  }
}

String formatCurrency(int? amount) {
  final formatter = NumberFormat('#,###');
  return formatter.format(amount) ?? '';
}

// ÏÉÅÌÉúÏóê Îî∞Îùº ÌÖçÏä§Ìä∏ÏôÄ ÏÉâÏÉÅÏùÑ Î∞òÌôòÌïòÎäî Ìï®Ïàò
Icon getStatusText(String status) {
  switch (status) {
    case 'pending':
      return Icon(Icons.hourglass_top, color: Color(0xFFeece01), size: 18);
    case 'approved':
      return Icon(
        Icons.check_circle_outline,
        color: Color(0xFF33A1FD),
        size: 20,
      );
    case 'returned':
      return Icon(Icons.cancel_outlined, color: Color(0xFFE53935), size: 20);
    default:
      return Icon(Icons.help_outline, color: Colors.grey);
  }
}
